---
- name: Ensure tomcat is running
  service:
    name: tomcat
    state: started
    enabled: yes

- name: Stop Tomcat server
  service:
    name: tomcat
    state: stopped

- name: Backup existing WAR file in Tomcat webapps
  block:
    - name: Get current timestamp
      set_fact:
        backup_timestamp: "{{ ansible_date_time.date | replace('-', '') }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"

    - name: Create backup directory with timestamp inside the backup folder
      file:
        path: "{{ tomcat_deploy_path }}/backup/{{ backup_timestamp }}"
        state: directory
        owner: tomcat

    - name: Check if the WAR file exists
      stat:
        path: "{{ tomcat_deploy_path }}/MyWebApp-1.0.war"
      register: war_file_stat

    - name: Move existing WAR file to backup folder
      command: mv "{{ tomcat_deploy_path }}/MyWebApp-1.0.war" "{{ tomcat_deploy_path }}/backup/{{ backup_timestamp }}/"
      when: war_file_stat.stat.exists
      become_user: tomcat  

- name: Copy cleanup script to Tomcat server
  copy:
    src: cleanup_backups.sh
    dest: "{{ tomcat_deploy_path }}/backup/cleanup_backups.sh"
    mode: '0755'
    owner: tomcat    

- name: Run cleanup script to retain last 5 backups
  command: bash "{{ tomcat_deploy_path }}/backup/cleanup_backups.sh"
  become: true
  become_user: tomcat

- name: Pull new artifact from Nexus
  get_url:
    url: "{{ nexus_url }}/repository/java-docker-nexus-release/com/dept/app/MyWebApp/1.0/MyWebApp-1.0.war"
    dest: "/tmp/MyWebApp-1.0.war"
    

- name: Deploy new application to Tomcat webapps
  copy:
    src: "/tmp/MyWebApp-1.0.war"
    dest: "{{ tomcat_deploy_path }}/MyWebApp-1.0.war"
    remote_src: true
    owner: tomcat
  become: true

- name: Start Tomcat server
  service:
    name: tomcat
    state: started

